// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiProtoClient is the client API for ApiProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiProtoClient interface {
	GetTemperature(ctx context.Context, in *Yr, opts ...grpc.CallOption) (*Temp, error)
}

type apiProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewApiProtoClient(cc grpc.ClientConnInterface) ApiProtoClient {
	return &apiProtoClient{cc}
}

func (c *apiProtoClient) GetTemperature(ctx context.Context, in *Yr, opts ...grpc.CallOption) (*Temp, error) {
	out := new(Temp)
	err := c.cc.Invoke(ctx, "/chika.climate.ApiProto/GetTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiProtoServer is the server API for ApiProto service.
// All implementations must embed UnimplementedApiProtoServer
// for forward compatibility
type ApiProtoServer interface {
	GetTemperature(context.Context, *Yr) (*Temp, error)
	mustEmbedUnimplementedApiProtoServer()
}

// UnimplementedApiProtoServer must be embedded to have forward compatible implementations.
type UnimplementedApiProtoServer struct {
}

func (UnimplementedApiProtoServer) GetTemperature(context.Context, *Yr) (*Temp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperature not implemented")
}
func (UnimplementedApiProtoServer) mustEmbedUnimplementedApiProtoServer() {}

// UnsafeApiProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiProtoServer will
// result in compilation errors.
type UnsafeApiProtoServer interface {
	mustEmbedUnimplementedApiProtoServer()
}

func RegisterApiProtoServer(s grpc.ServiceRegistrar, srv ApiProtoServer) {
	s.RegisterService(&ApiProto_ServiceDesc, srv)
}

func _ApiProto_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Yr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiProtoServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chika.climate.ApiProto/GetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiProtoServer).GetTemperature(ctx, req.(*Yr))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiProto_ServiceDesc is the grpc.ServiceDesc for ApiProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chika.climate.ApiProto",
	HandlerType: (*ApiProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemperature",
			Handler:    _ApiProto_GetTemperature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api-client-proto/api-client.proto",
}
